"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var gql = require("apollo-server").gql;
var typeDefinitions = gql(__makeTemplateObject(["\n  scalar JSON\n\n  type Channel {\n    description: String\n    displayName: String\n    uniqueName: String! @unique\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    locked: Boolean\n    deleted: Boolean\n    channelIconURL: String\n    channelBannerURL: String\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    # WikiPages:                [WikiPage]             @relationship(type: \"HAS_WIKI_PAGE\", direction: OUT)\n    ModerationDashboard: ModerationDashboard\n      @relationship(type: \"HAS_MODERATION_DASHBOARD\", direction: OUT)\n    Rules: [Rule!]! @relationship(type: \"HAS_RULE\", direction: OUT)\n    SuspendedUsers: [User!]!\n      @relationship(type: \"SUSPENDED_FROM_CHANNEL\", direction: IN)\n    Admins: [User!]! @relationship(type: \"ADMIN_OF_CHANNEL\", direction: IN)\n    Moderators: [ModerationProfile!]!\n      @relationship(type: \"MODERATOR_OF_CHANNEL\", direction: IN)\n    RelatedChannels: [Channel!]!\n      @relationship(type: \"RELATED_CHANNEL\", direction: OUT)\n    EventChannels: [EventChannel!]!\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: IN)\n    DiscussionChannels: [DiscussionChannel!]!\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: IN)\n    Comments: [Comment!]! @relationship(type: \"HAS_COMMENT\", direction: OUT) # used for aggregated comment counts\n  }\n\n  type DiscussionChannel {\n    id: ID! @id\n    locked: Boolean\n    discussionId: ID! # used for uniqueness constraint\n    channelUniqueName: String! # used for uniqueness constraint\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    weightedVotesCount: Float\n    Discussion: Discussion\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: OUT)\n    Channel: Channel @relationship(type: \"POSTED_IN_CHANNEL\", direction: OUT)\n    UpvotedByUsers: [User!]!\n      @relationship(type: \"UPVOTED_DISCUSSION\", direction: OUT)\n    DownvotedByModerators: [ModerationProfile!]!\n      @relationship(type: \"DOWNVOTED_DISCUSSION\", direction: OUT)\n    Comments: [Comment!]!\n      @relationship(type: \"CONTAINS_COMMENT\", direction: OUT)\n    emoji: JSON\n  }\n\n  type Discussion {\n    id: ID! @id\n    Author: User @relationship(type: \"POSTED_DISCUSSION\", direction: IN)\n    body: String\n    title: String!\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    updatedAt: DateTime @timestamp(operations: [UPDATE])\n    deleted: Boolean\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    # PastVersions:            [DiscussionVersion]     @relationship(type: \"HAS_VERSION\", direction: OUT)\n    DiscussionChannels: [DiscussionChannel!]!\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: IN)\n  }\n\n  type EventChannel {\n    id: ID! @id\n    locked: Boolean\n    eventId: ID! # used for uniqueness constraint\n    channelUniqueName: String! # used for uniqueness constraint\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    Event: Event @relationship(type: \"POSTED_IN_CHANNEL\", direction: OUT)\n    Channel: Channel @relationship(type: \"POSTED_IN_CHANNEL\", direction: OUT)\n    Comments: [Comment!]!\n      @relationship(type: \"CONTAINS_COMMENT\", direction: OUT)\n  }\n\n  enum RepeatUnit {\n    DAY\n    WEEK\n    MONTH\n    YEAR\n  }\n\n  enum RepeatType {\n    NEVER\n    ON\n    AFTER\n  }\n\n  type RepeatEvery {\n    count: Int\n    unit: RepeatUnit\n  }\n\n  type RepeatEnds {\n    type: String\n    count: Int\n    unit: RepeatUnit\n    until: DateTime\n  }\n\n  type RecurringEvent {\n    id: ID! @id\n    repeatEvery: RepeatEvery\n    repeatEnds: RepeatEnds\n    Events: [Event!]! @relationship(type: \"HAS_RECURRING_EVENT\", direction: OUT)\n  }\n\n  type Event {\n    id: ID! @id\n    title: String!\n    description: String\n    startTime: DateTime!\n    startTimeDayOfWeek: String # only used for filtering events by day of week\n    startTimeHourOfDay: Int # only used for filtering events by hour of day\n    endTime: DateTime!\n    locationName: String\n    address: String\n    virtualEventUrl: String\n    updatedAt: DateTime @timestamp(operations: [UPDATE])\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    placeId: String\n    isInPrivateResidence: Boolean\n    cost: String\n    free: Boolean\n    location: Point\n    canceled: Boolean!\n    deleted: Boolean\n    isHostedByOP: Boolean\n    isAllDay: Boolean\n    coverImageURL: String\n    locked: Boolean\n    Comments: [Comment!]!\n      @relationship(type: \"HAS_COMMENT\", direction: OUT)\n    RecurringEvent: RecurringEvent\n      @relationship(type: \"HAS_RECURRING_EVENT\", direction: OUT)\n    Poster: User @relationship(type: \"POSTED_BY\", direction: IN)\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    # PastVersions:          [EventVersion]    @relationship(type: \"HAS_VERSION\", direction: OUT)\n    EventChannels: [EventChannel!]!\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: IN)\n  }\n\n  type Comment {\n    id: ID! @id\n    CommentAuthor: CommentAuthor\n      @relationship(type: \"AUTHORED_COMMENT\", direction: IN)\n    DiscussionChannel: DiscussionChannel\n      @relationship(type: \"CONTAINS_COMMENT\", direction: IN)\n    Event: Event @relationship(type: \"HAS_COMMENT\", direction: IN)\n    Channel: Channel @relationship(type: \"HAS_COMMENT\", direction: IN)\n    ParentComment: Comment @relationship(type: \"IS_REPLY_TO\", direction: OUT)\n    text: String\n    isRootComment: Boolean!\n    ChildComments: [Comment!]! @relationship(type: \"IS_REPLY_TO\", direction: IN)\n    deleted: Boolean\n    updatedAt: DateTime @timestamp(operations: [UPDATE])\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    weightedVotesCount: Float\n    UpvotedByUsers: [User!]!\n      @relationship(type: \"UPVOTED_COMMENT\", direction: IN)\n    DownvotedByModerators: [ModerationProfile!]!\n      @relationship(type: \"DOWNVOTED_COMMENT\", direction: IN)\n    # PastVersions:            [CommentVersion]        @relationship(type: \"HAS_VERSION\", direction: OUT)\n    emoji: JSON\n  }\n\n  type Emoji {\n    id: ID! @id\n    name: String! @unique\n    PostedByUser: User @relationship(type: \"POSTED_EMOJI\", direction: IN)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n  }\n\n  type Rule {\n    summary: String\n    description: String\n  }\n\n  type Email {\n    address: String! @unique\n    User: User @relationship(type: \"HAS_EMAIL\", direction: OUT)\n  }\n\n  type User {\n    username: String! @unique\n    Email: Email @relationship(type: \"HAS_EMAIL\", direction: IN)\n    displayName: String\n    pronouns: String\n    location: String\n    bio: String\n    commentKarma: Int\n    discussionKarma: Int\n    profilePicURL: String\n    Comments: [Comment!]!\n      @relationship(type: \"AUTHORED_COMMENT\", direction: OUT)\n    AdminOfChannels: [Channel!]!\n      @relationship(type: \"ADMIN_OF_CHANNEL\", direction: OUT)\n    Discussions: [Discussion!]!\n      @relationship(type: \"POSTED_DISCUSSION\", direction: OUT)\n    Events: [Event!]! @relationship(type: \"POSTED_BY\", direction: OUT)\n    # SentMessages:            [Message!]           @relationship(type: \"SENT_MESSAGE\", direction: OUT)\n    # ReceivedMessages:        [Message!]           @relationship(type: \"RECEIVED_MESSAGE\", direction: OUT)\n    Feeds: [Feed!]! @relationship(type: \"HAS_FEED_IN_LIBRARY\", direction: OUT)\n    CreatedFeeds: [Feed!]! @relationship(type: \"CREATED_FEED\", direction: OUT)\n    DefaultFeed: Feed @relationship(type: \"DEFAULT_FEED\", direction: OUT)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    # AuthoredWikiPages:       [WikiPage]           @relationship(type: \"AUTHORED_PAGE\", direction: OUT)\n    # WikiChangeProposals:     [WikiChangeProposal] @relationship(type: \"AUTHORED_CHANGE_PROPOSAL\", direction: OUT)\n    # Notifications:           [Notification]       @relationship(type: \"HAS_NOTIFICATION\", direction: OUT)\n    Blocked: User @relationship(type: \"BLOCKED\", direction: OUT)\n    IsBlockedBy: User @relationship(type: \"BLOCKED\", direction: IN)\n    FavoriteChannels: [Channel!]!\n      @relationship(type: \"FAVORITE_CHANNEL\", direction: OUT)\n    RecentlyVisitedChannels: [Channel!]!\n      @relationship(type: \"RECENTLY_VISITED_CHANNEL\", direction: OUT)\n    UpvotedComments: [Comment!]!\n      @relationship(type: \"UPVOTED_COMMENT\", direction: OUT)\n    UpvotedDiscussionChannels: [DiscussionChannel!]!\n      @relationship(type: \"UPVOTED_DISCUSSION_IN_CHANNEL\", direction: OUT)\n    ModerationProfile: ModerationProfile\n      @relationship(type: \"MODERATION_PROFILE\", direction: OUT)\n    DefaultEmojiSkinTone: String\n    NotificationBundleInterval: String\n    PreferredTimeZone: String\n    Issues: [Issue!]! @relationship(type: \"AUTHORED_ISSUE\", direction: OUT)\n    IssueComments: [IssueComment!]!\n      @relationship(type: \"AUTHORED_ISSUE_COMMENT\", direction: OUT)\n    SuspendedFromChannels: [Channel!]!\n      @relationship(type: \"SUSPENDED_FROM_CHANNEL\", direction: OUT)\n    suspendedFromServer: Boolean\n    deleted: Boolean\n    ChannelRoles: [ChannelRole!]!\n      @relationship(type: \"HAS_CHANNEL_ROLE\", direction: OUT)\n    ServerRoles: [ServerRole!]!\n      @relationship(type: \"HAS_SERVER_ROLE\", direction: OUT)\n  }\n\n  type ModerationProfile {\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    displayName: String @unique\n    User: User @relationship(type: \"MODERATION_PROFILE\", direction: IN)\n    DownvotedComments: [Comment!]!\n      @relationship(type: \"DOWNVOTED_COMMENT\", direction: OUT)\n    DownvotedDiscussionChannels: [DiscussionChannel!]!\n      @relationship(type: \"DOWNVOTED_COMMENT_SECTION\", direction: OUT)\n    AuthoredReports: [Report!]!\n      @relationship(type: \"AUTHORED_REPORT\", direction: OUT)\n    Issues: [Issue!]! @relationship(type: \"AUTHORED_ISSUE\", direction: OUT)\n    DiscussionComments: [Comment!]!\n      @relationship(type: \"AUTHORED_COMMENT\", direction: OUT)\n    IssueComments: [IssueComment!]!\n      @relationship(type: \"AUTHORED_ISSUE_COMMENT\", direction: OUT)\n    ModChannelRoles: [ModChannelRole!]!\n      @relationship(type: \"HAS_MOD_ROLE\", direction: OUT)\n    ModServerRoles: [ModServerRole!]! @relationship(type: \"HAS_MOD_ROLE\", direction: OUT)\n  }\n\n  union IssueAuthor = User | ModerationProfile\n\n  type Issue {\n    id: ID! @id\n    Author: IssueAuthor @relationship(type: \"AUTHORED_ISSUE\", direction: IN)\n    title: String\n    body: String\n    ModerationDashboard: ModerationDashboard\n      @relationship(type: \"HAS_ISSUE\", direction: IN)\n    isOpen: Boolean!\n    Reports: [Report!]! @relationship(type: \"CITED_REPORT\", direction: OUT)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    updatedAt: DateTime! @timestamp(operations: [UPDATE])\n  }\n\n  union IssueCommentAuthor = User | ModerationProfile\n\n  type IssueComment {\n    id: ID! @id\n    Author: IssueCommentAuthor\n      @relationship(type: \"AUTHORED_ISSUE_COMMENT\", direction: IN)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    updatedAt: DateTime! @timestamp(operations: [UPDATE])\n  }\n\n  type ModerationDashboard {\n    id: ID! @id\n    issueTemplate: String\n    Channel: Channel\n      @relationship(type: \"HAS_MODERATION_DASHBOARD\", direction: IN)\n    Issues: [Issue!]! @relationship(type: \"HAS_ISSUE\", direction: OUT)\n  }\n\n  type Report {\n    id: ID! @id\n    Author: ModerationProfile\n      @relationship(type: \"AUTHORED_REPORT\", direction: IN)\n    text: String\n    RuleViolations: [Rule!]! @relationship(type: \"CITED_RULE\", direction: OUT)\n    Issues: [Issue!]! @relationship(type: \"CITED_REPORT\", direction: IN)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    updatedAt: DateTime! @timestamp(operations: [UPDATE])\n  }\n\n  union CommentAuthor = User #| ModerationProfile\n  type Feed {\n    id: ID! @id\n    title: String\n    description: String\n    Owner: User @relationship(type: \"CREATED_FEED\", direction: IN)\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    deleted: Boolean\n  }\n\n  type Tag {\n    text: String! @unique\n    Channels: [Channel!]! @relationship(type: \"HAS_TAG\", direction: IN)\n    Discussions: [Discussion!]! @relationship(type: \"HAS_TAG\", direction: IN)\n    Events: [Event!]! @relationship(type: \"HAS_TAG\", direction: IN)\n    Comments: [Comment!]! @relationship(type: \"HAS_TAG\", direction: IN)\n    Feeds: [Feed!]! @relationship(type: \"HAS_TAG\", direction: IN)\n  }\n\n  type SignedURL {\n    url: String\n  }\n\n  type Mutation {\n    addEmojiToComment(\n      commentId: ID!\n      emojiLabel: String!\n      unicode: String!\n      username: String!\n    ): Comment\n    removeEmojiFromComment(\n      commentId: ID!\n      emojiLabel: String!\n      username: String!\n    ): Comment\n    addEmojiToDiscussionChannel(\n      discussionChannelId: ID!\n      emojiLabel: String!\n      unicode: String!\n      username: String!\n    ): DiscussionChannel\n    removeEmojiFromDiscussionChannel(\n      discussionChannelId: ID!\n      emojiLabel: String!\n      username: String!\n    ): DiscussionChannel\n    createDiscussionWithChannelConnections(\n      discussionCreateInput: DiscussionCreateInput\n      channelConnections: [String]\n    ): Discussion\n    updateDiscussionWithChannelConnections(\n      discussionWhere: DiscussionWhere!\n      discussionUpdateInput: DiscussionUpdateInput!\n      channelConnections: [String!]!\n      channelDisconnections: [String]!\n    ): Discussion\n    createEventWithChannelConnections(\n      eventCreateInput: EventCreateInput\n      channelConnections: [String]\n    ): Event\n    updateEventWithChannelConnections(\n      eventWhere: EventWhere!\n      eventUpdateInput: EventUpdateInput!\n      channelConnections: [String!]!\n      channelDisconnections: [String]!\n    ): Event\n    upvoteComment(commentId: ID!, username: String!): Comment\n    undoUpvoteComment(commentId: ID!, username: String!): Comment\n    upvoteDiscussionChannel(discussionChannelId: ID!, username: String!): DiscussionChannel\n    undoUpvoteDiscussionChannel(discussionChannelId: ID!, username: String!): DiscussionChannel\n    createSignedStorageURL(filename: String!, contentType: String!): SignedURL\n  }\n\n  input SiteWideDiscussionSortOrder {\n    weightedVotesCount: String\n  }\n\n  enum SortType {\n    hot\n    new\n    top\n  }\n\n  enum TimeFrame {\n    day\n    week\n    month\n    year\n    all\n  }\n  \n  input DiscussionListOptions {\n    offset: Int\n    limit: Int\n    sort: SortType\n    timeFrame: TimeFrame\n  }\n\n  type SiteWideDiscussionListFormat {\n    aggregateDiscussionCount: Int!\n    discussions: [Discussion!]!\n  }\n\n  type DiscussionChannelListFormat {\n    aggregateDiscussionChannelsCount: Int!\n    discussionChannels: [DiscussionChannel!]!\n  }\n\n  type CommentSectionFormat {\n    DiscussionChannel: DiscussionChannel!\n    Comments: [Comment!]!\n  }\n\n  type EventCommentsFormat {\n    Event: Event!\n    Comments: [Comment!]!\n  }\n\n  type CommentRepliesFormat {\n    ChildComments: [Comment!]!\n    aggregateChildCommentCount: Int!\n  }\n\n  type RedditSubmission {\n    subreddit: String!\n    title: String!\n    createdUTC: Int!\n    author: String!\n    commentCount: Int!\n    text: String!\n    mediaMetadata: JSON\n    permalink: String!\n    thumbnail: String!\n    upvoteCount: Int!\n    url: String\n    preview: JSON\n  }\n\n  type SubredditSidebar {\n    title: String!\n    displayName: String!\n    shortDescription: String # 500 characters max\n    longDescription: String # 5120 characters max\n    allowGalleries: Boolean\n    communityIcon: String\n    showMediaPreview: Boolean\n    bannerImg: String\n    allowImages: Boolean\n  }\n\n  type ServerRole {\n    name: String @unique\n    description: String\n    canCreateChannel: Boolean\n    canCreateDiscussion: Boolean\n    canCreateEvent: Boolean\n    canCreateComment: Boolean\n    canUpvoteDiscussion: Boolean\n    canUpvoteComment: Boolean\n    canUploadFile: Boolean\n    canGiveFeedback: Boolean\n  }\n\n  type ChannelRole {\n    name: String @unique\n    description: String\n    canCreateDiscussion: Boolean\n    canCreateEvent: Boolean\n    canCreateComment: Boolean\n    canUpvoteDiscussion: Boolean\n    canUpvoteComment: Boolean\n    canUploadFile: Boolean\n    canGiveFeedback: Boolean\n    canUpdateChannel: Boolean\n  }\n\n  type ModChannelRole {\n    name: String @unique\n    description: String\n    canHideComment: Boolean\n    canHideEvent: Boolean\n    canHideDiscussion: Boolean\n    canDownvoteDiscussion: Boolean\n    canDownvoteComment: Boolean\n    canGiveFeedback: Boolean\n    canOpenSupportTickets: Boolean\n    canCloseSupportTickets: Boolean\n    canResolveSupportTickets: Boolean\n    canReport: Boolean\n  }\n\n  type ModServerRole {\n    name: String @unique\n    description: String\n    canOpenSupportTickets: Boolean\n    canLockChannel: Boolean\n    canCloseSupportTickets: Boolean\n  }\n\n  type ServerConfig {\n    serverName: String\n    serverDescription: String\n    serverIconURL: String\n    defaultChannelRole: ChannelRole @relationship(type: \"HAS_DEFAULT_CHANNEL_ROLE\", direction: OUT)\n    defaultServerRole: ServerRole! @relationship(type: \"HAS_DEFAULT_SERVER_ROLE\", direction: OUT)\n    defaultModRole: ModServerRole @relationship(type: \"HAS_DEFAULT_MOD_ROLE\", direction: OUT)\n  }\n\n  type Query {\n    getDiscussionsInChannel(\n      channelUniqueName: String!\n      searchInput: String\n      selectedTags: [String]\n      options: DiscussionListOptions\n    ): DiscussionChannelListFormat\n    getSiteWideDiscussionList(\n      searchInput: String\n      selectedChannels: [String]\n      selectedTags: [String]\n      options: DiscussionListOptions\n    ): SiteWideDiscussionListFormat\n    getCommentSection(\n      channelUniqueName: String!\n      discussionId: ID!\n      offset: Int\n      limit: Int\n      sort: String\n    ): CommentSectionFormat\n    getEventComments(\n      eventId: ID!\n      offset: Int\n      limit: Int\n      sort: SortType\n    ): EventCommentsFormat\n    getCommentReplies(\n      commentId: ID!\n      offset: Int\n      limit: Int\n      sort: SortType\n    ): CommentRepliesFormat\n    getSubreddit(subredditName: String!, options: JSON): [RedditSubmission]\n    getSubredditSidebar(subredditName: String!, options: JSON): SubredditSidebar\n  }\n"], ["\n  scalar JSON\n\n  type Channel {\n    description: String\n    displayName: String\n    uniqueName: String! @unique\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    locked: Boolean\n    deleted: Boolean\n    channelIconURL: String\n    channelBannerURL: String\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    # WikiPages:                [WikiPage]             @relationship(type: \"HAS_WIKI_PAGE\", direction: OUT)\n    ModerationDashboard: ModerationDashboard\n      @relationship(type: \"HAS_MODERATION_DASHBOARD\", direction: OUT)\n    Rules: [Rule!]! @relationship(type: \"HAS_RULE\", direction: OUT)\n    SuspendedUsers: [User!]!\n      @relationship(type: \"SUSPENDED_FROM_CHANNEL\", direction: IN)\n    Admins: [User!]! @relationship(type: \"ADMIN_OF_CHANNEL\", direction: IN)\n    Moderators: [ModerationProfile!]!\n      @relationship(type: \"MODERATOR_OF_CHANNEL\", direction: IN)\n    RelatedChannels: [Channel!]!\n      @relationship(type: \"RELATED_CHANNEL\", direction: OUT)\n    EventChannels: [EventChannel!]!\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: IN)\n    DiscussionChannels: [DiscussionChannel!]!\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: IN)\n    Comments: [Comment!]! @relationship(type: \"HAS_COMMENT\", direction: OUT) # used for aggregated comment counts\n  }\n\n  type DiscussionChannel {\n    id: ID! @id\n    locked: Boolean\n    discussionId: ID! # used for uniqueness constraint\n    channelUniqueName: String! # used for uniqueness constraint\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    weightedVotesCount: Float\n    Discussion: Discussion\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: OUT)\n    Channel: Channel @relationship(type: \"POSTED_IN_CHANNEL\", direction: OUT)\n    UpvotedByUsers: [User!]!\n      @relationship(type: \"UPVOTED_DISCUSSION\", direction: OUT)\n    DownvotedByModerators: [ModerationProfile!]!\n      @relationship(type: \"DOWNVOTED_DISCUSSION\", direction: OUT)\n    Comments: [Comment!]!\n      @relationship(type: \"CONTAINS_COMMENT\", direction: OUT)\n    emoji: JSON\n  }\n\n  type Discussion {\n    id: ID! @id\n    Author: User @relationship(type: \"POSTED_DISCUSSION\", direction: IN)\n    body: String\n    title: String!\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    updatedAt: DateTime @timestamp(operations: [UPDATE])\n    deleted: Boolean\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    # PastVersions:            [DiscussionVersion]     @relationship(type: \"HAS_VERSION\", direction: OUT)\n    DiscussionChannels: [DiscussionChannel!]!\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: IN)\n  }\n\n  type EventChannel {\n    id: ID! @id\n    locked: Boolean\n    eventId: ID! # used for uniqueness constraint\n    channelUniqueName: String! # used for uniqueness constraint\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    Event: Event @relationship(type: \"POSTED_IN_CHANNEL\", direction: OUT)\n    Channel: Channel @relationship(type: \"POSTED_IN_CHANNEL\", direction: OUT)\n    Comments: [Comment!]!\n      @relationship(type: \"CONTAINS_COMMENT\", direction: OUT)\n  }\n\n  enum RepeatUnit {\n    DAY\n    WEEK\n    MONTH\n    YEAR\n  }\n\n  enum RepeatType {\n    NEVER\n    ON\n    AFTER\n  }\n\n  type RepeatEvery {\n    count: Int\n    unit: RepeatUnit\n  }\n\n  type RepeatEnds {\n    type: String\n    count: Int\n    unit: RepeatUnit\n    until: DateTime\n  }\n\n  type RecurringEvent {\n    id: ID! @id\n    repeatEvery: RepeatEvery\n    repeatEnds: RepeatEnds\n    Events: [Event!]! @relationship(type: \"HAS_RECURRING_EVENT\", direction: OUT)\n  }\n\n  type Event {\n    id: ID! @id\n    title: String!\n    description: String\n    startTime: DateTime!\n    startTimeDayOfWeek: String # only used for filtering events by day of week\n    startTimeHourOfDay: Int # only used for filtering events by hour of day\n    endTime: DateTime!\n    locationName: String\n    address: String\n    virtualEventUrl: String\n    updatedAt: DateTime @timestamp(operations: [UPDATE])\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    placeId: String\n    isInPrivateResidence: Boolean\n    cost: String\n    free: Boolean\n    location: Point\n    canceled: Boolean!\n    deleted: Boolean\n    isHostedByOP: Boolean\n    isAllDay: Boolean\n    coverImageURL: String\n    locked: Boolean\n    Comments: [Comment!]!\n      @relationship(type: \"HAS_COMMENT\", direction: OUT)\n    RecurringEvent: RecurringEvent\n      @relationship(type: \"HAS_RECURRING_EVENT\", direction: OUT)\n    Poster: User @relationship(type: \"POSTED_BY\", direction: IN)\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    # PastVersions:          [EventVersion]    @relationship(type: \"HAS_VERSION\", direction: OUT)\n    EventChannels: [EventChannel!]!\n      @relationship(type: \"POSTED_IN_CHANNEL\", direction: IN)\n  }\n\n  type Comment {\n    id: ID! @id\n    CommentAuthor: CommentAuthor\n      @relationship(type: \"AUTHORED_COMMENT\", direction: IN)\n    DiscussionChannel: DiscussionChannel\n      @relationship(type: \"CONTAINS_COMMENT\", direction: IN)\n    Event: Event @relationship(type: \"HAS_COMMENT\", direction: IN)\n    Channel: Channel @relationship(type: \"HAS_COMMENT\", direction: IN)\n    ParentComment: Comment @relationship(type: \"IS_REPLY_TO\", direction: OUT)\n    text: String\n    isRootComment: Boolean!\n    ChildComments: [Comment!]! @relationship(type: \"IS_REPLY_TO\", direction: IN)\n    deleted: Boolean\n    updatedAt: DateTime @timestamp(operations: [UPDATE])\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    weightedVotesCount: Float\n    UpvotedByUsers: [User!]!\n      @relationship(type: \"UPVOTED_COMMENT\", direction: IN)\n    DownvotedByModerators: [ModerationProfile!]!\n      @relationship(type: \"DOWNVOTED_COMMENT\", direction: IN)\n    # PastVersions:            [CommentVersion]        @relationship(type: \"HAS_VERSION\", direction: OUT)\n    emoji: JSON\n  }\n\n  type Emoji {\n    id: ID! @id\n    name: String! @unique\n    PostedByUser: User @relationship(type: \"POSTED_EMOJI\", direction: IN)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n  }\n\n  type Rule {\n    summary: String\n    description: String\n  }\n\n  type Email {\n    address: String! @unique\n    User: User @relationship(type: \"HAS_EMAIL\", direction: OUT)\n  }\n\n  type User {\n    username: String! @unique\n    Email: Email @relationship(type: \"HAS_EMAIL\", direction: IN)\n    displayName: String\n    pronouns: String\n    location: String\n    bio: String\n    commentKarma: Int\n    discussionKarma: Int\n    profilePicURL: String\n    Comments: [Comment!]!\n      @relationship(type: \"AUTHORED_COMMENT\", direction: OUT)\n    AdminOfChannels: [Channel!]!\n      @relationship(type: \"ADMIN_OF_CHANNEL\", direction: OUT)\n    Discussions: [Discussion!]!\n      @relationship(type: \"POSTED_DISCUSSION\", direction: OUT)\n    Events: [Event!]! @relationship(type: \"POSTED_BY\", direction: OUT)\n    # SentMessages:            [Message!]           @relationship(type: \"SENT_MESSAGE\", direction: OUT)\n    # ReceivedMessages:        [Message!]           @relationship(type: \"RECEIVED_MESSAGE\", direction: OUT)\n    Feeds: [Feed!]! @relationship(type: \"HAS_FEED_IN_LIBRARY\", direction: OUT)\n    CreatedFeeds: [Feed!]! @relationship(type: \"CREATED_FEED\", direction: OUT)\n    DefaultFeed: Feed @relationship(type: \"DEFAULT_FEED\", direction: OUT)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    # AuthoredWikiPages:       [WikiPage]           @relationship(type: \"AUTHORED_PAGE\", direction: OUT)\n    # WikiChangeProposals:     [WikiChangeProposal] @relationship(type: \"AUTHORED_CHANGE_PROPOSAL\", direction: OUT)\n    # Notifications:           [Notification]       @relationship(type: \"HAS_NOTIFICATION\", direction: OUT)\n    Blocked: User @relationship(type: \"BLOCKED\", direction: OUT)\n    IsBlockedBy: User @relationship(type: \"BLOCKED\", direction: IN)\n    FavoriteChannels: [Channel!]!\n      @relationship(type: \"FAVORITE_CHANNEL\", direction: OUT)\n    RecentlyVisitedChannels: [Channel!]!\n      @relationship(type: \"RECENTLY_VISITED_CHANNEL\", direction: OUT)\n    UpvotedComments: [Comment!]!\n      @relationship(type: \"UPVOTED_COMMENT\", direction: OUT)\n    UpvotedDiscussionChannels: [DiscussionChannel!]!\n      @relationship(type: \"UPVOTED_DISCUSSION_IN_CHANNEL\", direction: OUT)\n    ModerationProfile: ModerationProfile\n      @relationship(type: \"MODERATION_PROFILE\", direction: OUT)\n    DefaultEmojiSkinTone: String\n    NotificationBundleInterval: String\n    PreferredTimeZone: String\n    Issues: [Issue!]! @relationship(type: \"AUTHORED_ISSUE\", direction: OUT)\n    IssueComments: [IssueComment!]!\n      @relationship(type: \"AUTHORED_ISSUE_COMMENT\", direction: OUT)\n    SuspendedFromChannels: [Channel!]!\n      @relationship(type: \"SUSPENDED_FROM_CHANNEL\", direction: OUT)\n    suspendedFromServer: Boolean\n    deleted: Boolean\n    ChannelRoles: [ChannelRole!]!\n      @relationship(type: \"HAS_CHANNEL_ROLE\", direction: OUT)\n    ServerRoles: [ServerRole!]!\n      @relationship(type: \"HAS_SERVER_ROLE\", direction: OUT)\n  }\n\n  type ModerationProfile {\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    displayName: String @unique\n    User: User @relationship(type: \"MODERATION_PROFILE\", direction: IN)\n    DownvotedComments: [Comment!]!\n      @relationship(type: \"DOWNVOTED_COMMENT\", direction: OUT)\n    DownvotedDiscussionChannels: [DiscussionChannel!]!\n      @relationship(type: \"DOWNVOTED_COMMENT_SECTION\", direction: OUT)\n    AuthoredReports: [Report!]!\n      @relationship(type: \"AUTHORED_REPORT\", direction: OUT)\n    Issues: [Issue!]! @relationship(type: \"AUTHORED_ISSUE\", direction: OUT)\n    DiscussionComments: [Comment!]!\n      @relationship(type: \"AUTHORED_COMMENT\", direction: OUT)\n    IssueComments: [IssueComment!]!\n      @relationship(type: \"AUTHORED_ISSUE_COMMENT\", direction: OUT)\n    ModChannelRoles: [ModChannelRole!]!\n      @relationship(type: \"HAS_MOD_ROLE\", direction: OUT)\n    ModServerRoles: [ModServerRole!]! @relationship(type: \"HAS_MOD_ROLE\", direction: OUT)\n  }\n\n  union IssueAuthor = User | ModerationProfile\n\n  type Issue {\n    id: ID! @id\n    Author: IssueAuthor @relationship(type: \"AUTHORED_ISSUE\", direction: IN)\n    title: String\n    body: String\n    ModerationDashboard: ModerationDashboard\n      @relationship(type: \"HAS_ISSUE\", direction: IN)\n    isOpen: Boolean!\n    Reports: [Report!]! @relationship(type: \"CITED_REPORT\", direction: OUT)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    updatedAt: DateTime! @timestamp(operations: [UPDATE])\n  }\n\n  union IssueCommentAuthor = User | ModerationProfile\n\n  type IssueComment {\n    id: ID! @id\n    Author: IssueCommentAuthor\n      @relationship(type: \"AUTHORED_ISSUE_COMMENT\", direction: IN)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    updatedAt: DateTime! @timestamp(operations: [UPDATE])\n  }\n\n  type ModerationDashboard {\n    id: ID! @id\n    issueTemplate: String\n    Channel: Channel\n      @relationship(type: \"HAS_MODERATION_DASHBOARD\", direction: IN)\n    Issues: [Issue!]! @relationship(type: \"HAS_ISSUE\", direction: OUT)\n  }\n\n  type Report {\n    id: ID! @id\n    Author: ModerationProfile\n      @relationship(type: \"AUTHORED_REPORT\", direction: IN)\n    text: String\n    RuleViolations: [Rule!]! @relationship(type: \"CITED_RULE\", direction: OUT)\n    Issues: [Issue!]! @relationship(type: \"CITED_REPORT\", direction: IN)\n    createdAt: DateTime! @timestamp(operations: [CREATE])\n    updatedAt: DateTime! @timestamp(operations: [UPDATE])\n  }\n\n  union CommentAuthor = User #| ModerationProfile\n  type Feed {\n    id: ID! @id\n    title: String\n    description: String\n    Owner: User @relationship(type: \"CREATED_FEED\", direction: IN)\n    Tags: [Tag!]! @relationship(type: \"HAS_TAG\", direction: OUT)\n    deleted: Boolean\n  }\n\n  type Tag {\n    text: String! @unique\n    Channels: [Channel!]! @relationship(type: \"HAS_TAG\", direction: IN)\n    Discussions: [Discussion!]! @relationship(type: \"HAS_TAG\", direction: IN)\n    Events: [Event!]! @relationship(type: \"HAS_TAG\", direction: IN)\n    Comments: [Comment!]! @relationship(type: \"HAS_TAG\", direction: IN)\n    Feeds: [Feed!]! @relationship(type: \"HAS_TAG\", direction: IN)\n  }\n\n  type SignedURL {\n    url: String\n  }\n\n  type Mutation {\n    addEmojiToComment(\n      commentId: ID!\n      emojiLabel: String!\n      unicode: String!\n      username: String!\n    ): Comment\n    removeEmojiFromComment(\n      commentId: ID!\n      emojiLabel: String!\n      username: String!\n    ): Comment\n    addEmojiToDiscussionChannel(\n      discussionChannelId: ID!\n      emojiLabel: String!\n      unicode: String!\n      username: String!\n    ): DiscussionChannel\n    removeEmojiFromDiscussionChannel(\n      discussionChannelId: ID!\n      emojiLabel: String!\n      username: String!\n    ): DiscussionChannel\n    createDiscussionWithChannelConnections(\n      discussionCreateInput: DiscussionCreateInput\n      channelConnections: [String]\n    ): Discussion\n    updateDiscussionWithChannelConnections(\n      discussionWhere: DiscussionWhere!\n      discussionUpdateInput: DiscussionUpdateInput!\n      channelConnections: [String!]!\n      channelDisconnections: [String]!\n    ): Discussion\n    createEventWithChannelConnections(\n      eventCreateInput: EventCreateInput\n      channelConnections: [String]\n    ): Event\n    updateEventWithChannelConnections(\n      eventWhere: EventWhere!\n      eventUpdateInput: EventUpdateInput!\n      channelConnections: [String!]!\n      channelDisconnections: [String]!\n    ): Event\n    upvoteComment(commentId: ID!, username: String!): Comment\n    undoUpvoteComment(commentId: ID!, username: String!): Comment\n    upvoteDiscussionChannel(discussionChannelId: ID!, username: String!): DiscussionChannel\n    undoUpvoteDiscussionChannel(discussionChannelId: ID!, username: String!): DiscussionChannel\n    createSignedStorageURL(filename: String!, contentType: String!): SignedURL\n  }\n\n  input SiteWideDiscussionSortOrder {\n    weightedVotesCount: String\n  }\n\n  enum SortType {\n    hot\n    new\n    top\n  }\n\n  enum TimeFrame {\n    day\n    week\n    month\n    year\n    all\n  }\n  \n  input DiscussionListOptions {\n    offset: Int\n    limit: Int\n    sort: SortType\n    timeFrame: TimeFrame\n  }\n\n  type SiteWideDiscussionListFormat {\n    aggregateDiscussionCount: Int!\n    discussions: [Discussion!]!\n  }\n\n  type DiscussionChannelListFormat {\n    aggregateDiscussionChannelsCount: Int!\n    discussionChannels: [DiscussionChannel!]!\n  }\n\n  type CommentSectionFormat {\n    DiscussionChannel: DiscussionChannel!\n    Comments: [Comment!]!\n  }\n\n  type EventCommentsFormat {\n    Event: Event!\n    Comments: [Comment!]!\n  }\n\n  type CommentRepliesFormat {\n    ChildComments: [Comment!]!\n    aggregateChildCommentCount: Int!\n  }\n\n  type RedditSubmission {\n    subreddit: String!\n    title: String!\n    createdUTC: Int!\n    author: String!\n    commentCount: Int!\n    text: String!\n    mediaMetadata: JSON\n    permalink: String!\n    thumbnail: String!\n    upvoteCount: Int!\n    url: String\n    preview: JSON\n  }\n\n  type SubredditSidebar {\n    title: String!\n    displayName: String!\n    shortDescription: String # 500 characters max\n    longDescription: String # 5120 characters max\n    allowGalleries: Boolean\n    communityIcon: String\n    showMediaPreview: Boolean\n    bannerImg: String\n    allowImages: Boolean\n  }\n\n  type ServerRole {\n    name: String @unique\n    description: String\n    canCreateChannel: Boolean\n    canCreateDiscussion: Boolean\n    canCreateEvent: Boolean\n    canCreateComment: Boolean\n    canUpvoteDiscussion: Boolean\n    canUpvoteComment: Boolean\n    canUploadFile: Boolean\n    canGiveFeedback: Boolean\n  }\n\n  type ChannelRole {\n    name: String @unique\n    description: String\n    canCreateDiscussion: Boolean\n    canCreateEvent: Boolean\n    canCreateComment: Boolean\n    canUpvoteDiscussion: Boolean\n    canUpvoteComment: Boolean\n    canUploadFile: Boolean\n    canGiveFeedback: Boolean\n    canUpdateChannel: Boolean\n  }\n\n  type ModChannelRole {\n    name: String @unique\n    description: String\n    canHideComment: Boolean\n    canHideEvent: Boolean\n    canHideDiscussion: Boolean\n    canDownvoteDiscussion: Boolean\n    canDownvoteComment: Boolean\n    canGiveFeedback: Boolean\n    canOpenSupportTickets: Boolean\n    canCloseSupportTickets: Boolean\n    canResolveSupportTickets: Boolean\n    canReport: Boolean\n  }\n\n  type ModServerRole {\n    name: String @unique\n    description: String\n    canOpenSupportTickets: Boolean\n    canLockChannel: Boolean\n    canCloseSupportTickets: Boolean\n  }\n\n  type ServerConfig {\n    serverName: String\n    serverDescription: String\n    serverIconURL: String\n    defaultChannelRole: ChannelRole @relationship(type: \"HAS_DEFAULT_CHANNEL_ROLE\", direction: OUT)\n    defaultServerRole: ServerRole! @relationship(type: \"HAS_DEFAULT_SERVER_ROLE\", direction: OUT)\n    defaultModRole: ModServerRole @relationship(type: \"HAS_DEFAULT_MOD_ROLE\", direction: OUT)\n  }\n\n  type Query {\n    getDiscussionsInChannel(\n      channelUniqueName: String!\n      searchInput: String\n      selectedTags: [String]\n      options: DiscussionListOptions\n    ): DiscussionChannelListFormat\n    getSiteWideDiscussionList(\n      searchInput: String\n      selectedChannels: [String]\n      selectedTags: [String]\n      options: DiscussionListOptions\n    ): SiteWideDiscussionListFormat\n    getCommentSection(\n      channelUniqueName: String!\n      discussionId: ID!\n      offset: Int\n      limit: Int\n      sort: String\n    ): CommentSectionFormat\n    getEventComments(\n      eventId: ID!\n      offset: Int\n      limit: Int\n      sort: SortType\n    ): EventCommentsFormat\n    getCommentReplies(\n      commentId: ID!\n      offset: Int\n      limit: Int\n      sort: SortType\n    ): CommentRepliesFormat\n    getSubreddit(subredditName: String!, options: JSON): [RedditSubmission]\n    getSubredditSidebar(subredditName: String!, options: JSON): SubredditSidebar\n  }\n"]));
module.exports = typeDefinitions;
